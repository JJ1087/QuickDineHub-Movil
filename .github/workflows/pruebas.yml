name: APP CI/CD Workflow

# Disparadores para el workflow
on:
  push:
    branches:
      - '*'    # Ejecutar las pruebas en cualquier rama en cada push
  pull_request:
    branches:
      - master   # Ejecutar las pruebas antes de fusionar a master

  workflow_dispatch:

# Permisos para GitHub Actions
permissions:
  contents: read

jobs:
  Pruebas:
    #name: Run Unit Tests
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout del repositorio
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Configurar Node.js (para Angular y Jest)
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20' # Versión de Node.js recomendada
          cache: 'npm'  # Configura el caché para npm automáticamente

      # 3. Instalar dependencias del proyecto
      - name: Install dependencies
        run: npm ci

      # 4. Levantar la aplicación de Angular
      - name: Start Angular App
        run: npx ionic serve --port 8100 &
        env:
          CI: true

      # # 5. Esperar a que el servidor esté arriba
      # - name: Wait for Angular App to be available
      #   run: npx wait-on http://localhost:8100

      # # 6. Ejecutar pruebas unitarias con Jasmin y Karma
      # - name: Run unit test Jasmine karma tests
      #   run: npm test -- --no-watch --no-progress --browsers=ChromeHeadlessCI

      # # 7. Ejecutar pruebas lint
      # - name: Run lint test
      #   run: npm run lint

      # # 8. Ejecutar pruebas e2e con cypress
      # - name: e2e cypress
      #   run: npx cypress run

  build:
      name: Build AAB
      runs-on: ubuntu-latest
      needs: tests # Solo ejecutarse si el job de tests fue exitoso
      steps:
        # 1. Checkout del código
        - name: Checkout code
          uses: actions/checkout@v3

        # 2. Configurar Java y Android SDK
        - name: Set up JDK
          uses: actions/setup-java@v3
          with:
            java-version: '11'

        - name: Set up Android SDK
          uses: android-actions/setup-android@v2
          with:
            api-level: 33
            target: android-33
            build-tools: 33.0.0

        # 3. Construir el artefacto AAB
        - name: Build AAB
          run: |
            ./gradlew clean bundleRelease
          env:
            ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
            ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
            ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
            ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}

        # 4. Subir el artefacto generado
        - name: Upload AAB
          uses: actions/upload-artifact@v3
          with:
            name: app-release.aab
            path: app/build/outputs/bundle/release/app-release.aab